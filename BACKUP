Option Explicit
Public WB0 As Workbook, TmpCell As Range, TmpSheet As Worksheet, GlobalMacroList() as Variant
Public ObjWS_Config As Object, ObjCell_SearchPath As Object, ObjCell_Result As Object, ObjCell_Name As Object
Public Const ObjWS_Config_Name As String = "CONFIG"

Public Const MAXNUM_STARMARK As Integer = 5
Public Const MAXNUM_FILEFIND As Integer = 100
Public Const MAXNUM_DATAFIND As Integer = 15
Public Const MAXNUM_CURVESERIES As Integer = 50
Public Const MAXNUM_CALRESULT As Integer = 20
'===================Chart profile       ===Position===
Public Const SET_CHTL As Integer = 446
Public Const SET_CHTT As Integer = 15
Public Const SET_CHTW As Integer = 400
Public Const SET_CHTH As Integer = 300
Public Const SET_CHTC As Integer = 3
'===================Chart count per row
Public Const SET_INTROW As Integer = 1: Public Const SET_INTCOL As Integer = 2
'===================Initial             ===Position===
Public Const SET_BTTROW As Integer = SET_INTROW: Public Const SET_BTTCOL As Integer = SET_INTCOL - 1: Public Const SET_BTTCNT As Integer = 11 
'===================Button              ===Position===
Public Const SET_CALCROW As Integer = SET_BTTCNT + 1: Public Const SET_CALCCOL As Integer = SET_BTTCOL: Public Const SET_OFFSET As Integer = 15
'===================Calculate           ===Position===

Public Const SET_YCOL As Integer = SET_INTCOL + 1: Public Const SET_XCOL As Integer = SET_INTCOL + 2
Public Const SET_NCOL As Integer = SET_INTCOL + 3: Public Const SET_PATHCOL As Integer = SET_INTCOL + 4

'=============================Ribbon 1 - 1'=============================
Sub ListFile()
    Call InitGlobals
    Dim iStarNum%, sSearchPath$, sSplitPath(MAXNUM_STARMARK) As String
    sSearchPath = ObjCell_SearchPath.Value
	If sSearchPath = "" Or sSearchPath = "<Path>" Then End
	If Instr(sSearchPath, "*") = 0 Then sSearchPath = sSearchPath & "\*"
    'ObjCell_Name.ClearContents
    ObjCell_Result.ClearContents
    If Trim(sSearchPath) = "" Then Exit Sub
    Dim iStarPos%, iBackSlashPos%
    For iStarNum = 0 To MAXNUM_STARMARK
        iStarPos = InStr(sSearchPath, "*")
        If iStarPos > 0 Then
            iBackSlashPos = InStr(iStarPos, sSearchPath, "\")
            If iBackSlashPos > 0 Then
                sSplitPath(iStarNum) = Left(sSearchPath, iBackSlashPos - 1)
                sSearchPath = Mid(sSearchPath, iBackSlashPos + 1)
            Else
                sSplitPath(iStarNum) = sSearchPath
                Exit For
            End If
        Else
            sSplitPath(iStarNum) = sSearchPath
        End If
    Next iStarNum
    Call FilePath(sSplitPath, sSplitPath(0), 0, iStarNum, ObjCell_SearchPath)
    ObjCell_Result.Font.ColorIndex = xlAutomatic
End Sub
Public Function FilePath(sPath() As String, sTmpPath$, iCurrent%, iStarNum%, ObjCell_SearchPath)
    Dim sDir$, sFiles(MAXNUM_FILEFIND) As String, iFilesIndex%
    iFilesIndex = 0
    sDir = Left(sTmpPath, InStrRev(sTmpPath, "\"))
    If iCurrent <= iStarNum Then
        sFiles(0) = FileSystem.Dir(sTmpPath, vbDirectory)
        Do While sFiles(iFilesIndex) <> ""
            Do While sFiles(iFilesIndex) = "." Or sFiles(iFilesIndex) = ".."
                sFiles(iFilesIndex) = FileSystem.Dir()
            Loop
            iFilesIndex = iFilesIndex + 1
            sFiles(iFilesIndex) = FileSystem.Dir()
        Loop
        iFilesIndex = iFilesIndex - 1
        Dim iDocIndex%
        For iDocIndex% = 0 To iFilesIndex
            If (GetAttr(sDir & sFiles(iDocIndex)) And vbDirectory) = vbDirectory Then
                Call FilePath(sPath, sDir & sFiles(iDocIndex) & "" & sPath(iCurrent + 1), iCurrent + 1, iStarNum, ObjCell_SearchPath)
            Else
                If iCurrent = iStarNum Then
                    Dim iRow%
                    iRow% = 1
                    Do While ObjCell_SearchPath.Offset(iRow).Value <> ""
                        iRow = iRow + 1
                    Loop
                    ObjCell_SearchPath.Offset(iRow).Value = sDir & sFiles(iDocIndex)
                End If
            End If
        Next iDocIndex
    End If
End Function
'=============================Ribbon 1 - 2'=============================
Sub SimpName()
    Call InitGlobals
    Dim answer$, result$, original$, startfrom$, endbefore$
    answer = MsgBox("Clear current result? (Number is not available)", vbQuestion + vbYesNo + vbDefaultButton2, "Clean Result")
    If answer = vbYes Then ObjCell_Name.ClearContents
    For Each TmpCell In ObjCell_Result
        If Trim(TmpCell) <> "" Then
            original = TmpCell.Value
            If InStrRev(original, "\") > 0 Then result = Mid(original, InStrRev(original, "\") + 1)
            If InStrRev(result, ".") > 0 Then result = Left(result, InStrRev(result, ".") - 1)
            If Trim(result) <> "" Then TmpCell = result
        End If
    Next TmpCell
    '===================Only file name reserve
    With ObjCell_Name.FormatConditions.AddUniqueValues
        .DupeUnique = xlDuplicate
            With .Font
                .Bold = True
                .ColorIndex = 3
            End With
    End With
    '===================Highlight duplicate data
    startfrom = InputBox("StartFrom: ", "Split Index")
    If StrPtr(startfrom) = 0 Then Call ListFile: End
    endbefore = InputBox("EndBefore: ", "Split Index")
    If StrPtr(endbefore) = 0 Then Call ListFile: End
    For Each TmpCell In ObjCell_Result
        If Trim(TmpCell) <> "" Then
            original = TmpCell.Value
            If InStr(original, startfrom) > 0 Then result = Mid(original, InStr(original, startfrom))
            If InStrRev(result, endbefore) > 0 And endbefore <> "" Then result = Left(result, InStrRev(result, endbefore) - 1)
            If Len(result) > 31 - 5 Then result = Left(result, 31 - 6)
            If Trim(TmpCell.Offset(, SET_NCOL - SET_PATHCOL)) = "" Then TmpCell.Offset(, SET_NCOL - SET_PATHCOL) = result
        End If
        result = ""
    Next TmpCell
    Call ListFile
End Sub
'=============================Ribbon 1 - 3'=============================
Sub ExtractSheet()
    Call InitGlobals
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    If WorksheetFunction.CountA(ObjCell_Result) <> 0 Then
        For Each TmpSheet In WB0.Worksheets
            If TmpSheet.Name <> ObjWS_Config.Name Then TmpSheet.Delete
        Next
    End If
    '===================If Result is not empty, reset sheets
    For Each TmpCell In ObjCell_Name
        If Trim(TmpCell) <> "" And Trim(TmpCell.Offset(, SET_PATHCOL - SET_NCOL)) <> "" Then Call GetWorkSheet(Trim(TmpCell.Offset(, SET_PATHCOL - SET_NCOL)), CStr(TmpCell.Value))
    Next TmpCell
    '===================Sheets extracted
    Dim Flag%
    For Each TmpSheet In WB0.Worksheets
        Flag = 0
        For Each TmpCell In ObjCell_Name
        '===================If ObjCell_Name has recorded the sheet
            If Trim(TmpCell) = TmpSheet.Name Then
                If Trim(TmpCell.Offset(, SET_XCOL - SET_NCOL)) <> "" Then
                    Dim iRow%: iRow = DataRange(TmpSheet, TmpCell.Offset(, SET_XCOL - SET_NCOL)).Row
                    If iRow > 6 Then TmpSheet.Rows(2).Resize(iRow - 3).EntireRow.Hidden = True
                End If
                Flag = 1
                '===================Hide other irrelevant rows
                Exit For
            End If
        Next TmpCell
        If Flag = 0 Then
            Dim LastCell As Object
            Set LastCell = ObjWS_Config.Cells(ObjWS_Config.Cells(MAXNUM_FILEFIND, SET_NCOL).End(xlUp).Row + 1, SET_NCOL)
            LastCell = TmpSheet.Name
            '===================Add sub-sheets in the Name list
        End If
    Next TmpSheet
    Set TmpCell = ObjCell_Name.Find(What:=ObjWS_Config_Name, SearchOrder:=xlByRows, LookAt:=xlWhole, MatchCase:=True): TmpCell.ClearContents
    For Each TmpCell In ObjCell_Name
        If Trim(TmpCell) <> "" Then
            Flag = 0
            For Each TmpSheet In WB0.Worksheets
                If Trim(TmpCell) = TmpSheet.Name Then Flag = 1: Exit For
            Next TmpSheet
            If Flag = 0 Then TmpCell.ClearContents
        End If
    Next TmpCell
    '===================Delete Name with no sheet corresponding
    ObjWS_Config.Select
    For Each TmpCell In ObjCell_Result
        TmpCell.ClearContents
    Next TmpCell
    '===================Delete Result list
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub
Public Function GetWorkSheet(sFilePath As String, sRename As String)
    'On Error Resume Next
    On Error GoTo ErrHandle
    Dim sFileName$, ObjWS_Index As Object
    sFileName = Mid(sFilePath, InStrRev(sFilePath, "\") + 1)
    If sRename = "" Then Exit Function
    If Len(sRename) > 31 Then MsgBox ("Over 31 chrs: " & sRename): Exit Function
	Dim illegal As Variant, iCnt%: ReDim illegal(5)
	illegal = Array("\", "/", "?", "*", "[", "]")
	For iCnt = 0 to 5
		If InStr(sRename, illegal(iCnt)) > 0 Then MsgBox ("Invalid chrs: \/?*[] in " & sRename): Exit Function
	Next iCnt
	'===================sRename legal check
    Workbooks.OpenText Filename:=sFilePath, StartRow:=1, DataType:=xlDelimited, TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=True, Tab:=True, Semicolon:=False, Comma:=True, Space:=False, Other:=False
    Dim iSheetIndex%
        For iSheetIndex = 1 To Workbooks(sFileName).Worksheets.Count
            Set ObjWS_Index = Workbooks(sFileName).Worksheets(iSheetIndex)
            ObjWS_Index.Cells.Font.Name = "Calibri"
            If Workbooks(sFileName).Worksheets.Count > 1 Then
                If Len(sRename) < 31 - 6 - 1 Then ObjWS_Index.Name = sRename & " (" & CStr(iSheetIndex) & ")"
                If iSheetIndex = 1 Then ObjWS_Index.Name = sRename
            Else
                ObjWS_Index.Name = sRename
            End If
            ObjWS_Index.Copy after:= WB0.Worksheets(WB0.Worksheets.Count)
        Next iSheetIndex
    Workbooks(sFileName).Close savechanges:=False
    Exit Function
ErrHandle:
    MsgBox ("Suffered error opening " & sRename)
End Function
Public Function DataRange(ByVal Datasheet As Object, sPara$) As Range
    Dim iCnt%, DataCell As Range
    If Datasheet.FilterMode Then Datasheet.ShowAllData
    If Len(Trim(sPara)) = 1 Then
        Set DataCell = Datasheet.Cells.Find(What:=sPara, SearchOrder:=xlByRows, LookAt:=xlWhole, MatchCase:=True)
        If DataCell Is Nothing Then Set DataCell = Datasheet.Cells.Find(What:=Chr(32) & sPara, SearchOrder:=xlByRows, LookAt:=xlWhole, MatchCase:=True)
    Else
        Set DataCell = Datasheet.Cells.Find(What:=sPara, SearchOrder:=xlByRows, LookAt:=xlPart, MatchCase:=True)
    End If
      Do While iCnt < MAXNUM_DATAFIND
        If DataCell Is Nothing Then MsgBox ("Cannot find " & sPara & " for " & Datasheet.Name): Set DataRange = Datasheet.Cells(1, 1): Exit Do
        If Trim(DataCell.Value) = sPara And IsNumeric(DataCell.Offset(1).Text) And IsNumeric(DataCell.Offset(2).Text) And IsNumeric(DataCell.Offset(3).Text) Then
            Set DataRange = DataCell.Offset(1).Resize(DataCell.End(xlDown).Row - DataCell.Row)
            Exit Function
        Else
            Set DataCell = Datasheet.Cells.FindNext(DataCell)
            iCnt = iCnt + 1
        End If
    Loop
    Set DataRange = Datasheet.Cells(1, 1)
    MsgBox ("Cannot find " & sPara & " for " & Datasheet.Name)
End Function
'=============================Ribbon 2 - 1'=============================
Sub ChartGen()
    Call InitGlobals
    Dim iSheetNum%, ChartName$, sParaX$, sParaY$, sParaY2$, sFilter$, myChart As Chart
    Dim Color(MAXNUM_CURVESERIES) As Variant, iCnt%, iGroup%, iLeft%, iTop%: iLeft = SET_CHTL: iTop = SET_CHTT
    If ObjWS_Config.ChartObjects.Count > 0 Then ObjWS_Config.ChartObjects.Delete
    Dim iBlank%
    For Each TmpCell In ObjCell_Name
        If Trim(TmpCell) <> "" And TmpCell.Interior.Pattern = xlNone Then TmpCell.Interior.Color = 16777215 - 65793 * iBlank: iBlank = iBlank + 1
    Next TmpCell
    '===================Blank cells in ObjCell_Name mark grey
    For Each TmpCell In ObjCell_Name
        If Trim(TmpCell) <> "" And TmpCell.Interior.Pattern <> xlNone And Not IsInArray(TmpCell.Interior.Color, Color()) Then: Color(iCnt) = TmpCell.Interior.Color: iCnt = iCnt + 1
        If iCnt > MAXNUM_CURVESERIES Then End
    Next TmpCell
    '===================Color array update
    For iGroup = 0 To iCnt - 1
        ChartName = ""
        Set myChart = ObjWS_Config.ChartObjects.Add(Left:=iLeft, Top:=iTop, Width:=SET_CHTW, Height:=SET_CHTH).Chart: myChart.ChartType = xlXYScatter
        For Each TmpCell In ObjCell_Name
            If Trim(TmpCell) <> "" And IsNumeric(TmpCell) Then MsgBox ("Number Name is not available"): End
            If TmpCell.Interior.Color = Color(iGroup) And CheckSheet(CStr(TmpCell.Value)) Then
                If ChartName = "" Then ChartName = Trim(TmpCell): sParaY2 = Trim(TmpCell.Offset(, SET_YCOL - SET_NCOL))
                sParaX = Trim(TmpCell.Offset(, SET_XCOL - SET_NCOL)): sParaY = Trim(TmpCell.Offset(, SET_YCOL - SET_NCOL))
                sFilter = Trim(TmpCell.Offset(, SET_INTCOL - SET_NCOL))
                Call Data2Chart(myChart, WB0.Worksheets(CStr(TmpCell.Value)), sFilter, sParaX, sParaY)
                If sParaY <> sParaY2 Then myChart.SeriesCollection(myChart.SeriesCollection.Count).AxisGroup = 2
            End If
        Next TmpCell
    Call ChartProperty(myChart, ChartName, sParaX, sParaY)
    If myChart.HasAxis(xlCategory, xlSecondary) = True Then
        With myChart.Axes(xlValue, xlSecondary)
            .HasTitle = True
            .AxisTitle.Text = sParaY
            .Crosses = xlMinimum
            .MajorTickMark = xlInside
            .HasMajorGridlines = True
            .MajorGridlines.Border.LineStyle = xlDash
            .MajorGridlines.Border.ColorIndex = 15
            .Format.Line.Visible = msoFalse
        End With
    End If
    '===================Set Y2 axis
    If (ObjWS_Config.ChartObjects.Count) Mod SET_CHTC = 0 Then
        iLeft = SET_CHTL: iTop = iTop + SET_CHTH
    Else
        iLeft = iLeft + SET_CHTW
    End If
    Next iGroup
    '===================Set chart count per row
    Dim srs As Series, chartset As ChartObject, iCurve%
    iCurve = 1
        For Each chartset In ObjWS_Config.ChartObjects
            For Each srs In chartset.Chart.SeriesCollection
                ObjCell_SearchPath.Offset(iCurve) = srs.Name
                'ObjCell_SearchPath.Offset(iCurve).Interior.ColorIndex = srs.MarkerForegroundColorIndex
                'ObjCell_SearchPath.Offset(iCurve, SET_NCOL - SET_PATHCOL) = chartset.Chart.ChartTitle.Text
                iCurve = iCurve + 1
            Next srs
    Next chartset
    '===================Add series info at ObjCell_Result
End Sub
Public Function ChartProperty(myChart As Chart, ChartName$, sParaX$, sParaY$)
    With myChart
        .HasTitle = True: .ChartTitle.Text = ChartName
        .PlotArea.Border.LineStyle = xlSolid: .PlotArea.Border.Weight = 3: .PlotArea.Border.ColorIndex = 1
        .HasLegend = True: .Legend.IncludeInLayout = False: .Legend.Position = xlLegendPositionBottom
        .Legend.Font.Size = 12: If .SeriesCollection.Count > 9 Then .Legend.Font.Size = 10
        .Legend.Width = SET_CHTW - 2: .Legend.Height = 0.15 * SET_CHTH
        .Legend.Left = 2: .Legend.Top = SET_CHTH - myChart.Legend.Height
        .PlotArea.Height = 0.7 * SET_CHTH
        With .Axes(xlCategory, xlPrimary) 'X
            .HasTitle = True
            .AxisTitle.Text = sParaX
            .Crosses = xlMinimum
            .MajorTickMark = xlInside
            .HasMajorGridlines = True
            .MajorGridlines.Border.LineStyle = xlDash
            .MajorGridlines.Border.ColorIndex = 15
            .Format.Line.Visible = msoFalse
        End With
        With .Axes(xlValue, xlPrimary)
            .HasTitle = True
            .AxisTitle.Text = sParaY
            .Crosses = xlMinimum
            .MajorTickMark = xlInside
            .HasMajorGridlines = True
            .MajorGridlines.Border.LineStyle = xlDash
            .MajorGridlines.Border.ColorIndex = 15
            .Format.Line.Visible = msoFalse
        End With
    End With
    Dim srs As Series
    For Each srs In myChart.SeriesCollection
            srs.MarkerStyle = xlMarkerStyleCircle
            srs.MarkerSize = 3
            srs.MarkerBackgroundColorIndex = xlColorIndexNone
    Next srs
End Function
Public Function DataArray(ByVal DataRng As Range) As Variant
    Dim iCnt%, TmpArray() As Variant
    ReDim TmpArray(0)
    If DataRng Is Nothing Then: DataArray = TmpArray: Exit Function
    ReDim TmpArray(0 To DataRng.Count)
    For iCnt = 0 To DataRng.Count
        TmpArray(iCnt) = DataRng(iCnt + 1).Value
    Next iCnt
    DataArray = TmpArray
End Function
Public Function Data2Chart(myChart As Chart, ByVal Datasheet As Object, sFilter$, sParaX$, sParaY$)
    Dim iRow%, iInterval%, iCnt%, DataCell As Range, DataFilter As Range
    If sFilter <> "" Then
        iInterval = 0: iRow = 0: iCnt = 0
        Set DataFilter = DataRange(Datasheet, sFilter)
        If DataFilter Is Nothing Then Exit Function
        For Each DataCell In DataFilter
            If iCnt > MAXNUM_CURVESERIES Then MsgBox ("Too many curves for " & Datasheet.Name): Exit Function
            iRow = iRow + 1
            If DataCell.Value <> DataCell.Offset(1).Value Then
                If iInterval = 0 Then iInterval = iRow
                If iInterval = 0 Then Exit Function
                With myChart.SeriesCollection.NewSeries
                    .MarkerSize = 3
                    .MarkerBackgroundColorIndex = xlColorIndexNone
                    '.MarkerForegroundColorIndex = xlColorIndexNone
                    .XValues = DataArray(DataRange(Datasheet, sParaX).Offset(iCnt * iInterval).Resize(iInterval))
                    .Values = DataArray(DataRange(Datasheet, sParaY).Offset(iCnt * iInterval).Resize(iInterval))
                    .Name = Datasheet.Name & " " & sFilter & " = " & DataCell.Value
                End With
                If DataCell.Offset(1).Value = "" Then: Exit For
                iCnt = iCnt + 1
            End If
        Next DataCell
    Else
        With myChart.SeriesCollection.NewSeries
            .XValues = DataArray(DataRange(Datasheet, sParaX))
            .Values = DataArray(DataRange(Datasheet, sParaY))
            .Name = Datasheet.Name
        End With
    End If
End Function
Public Function CheckSheet(sWSName As String) As Boolean
    Dim IsExist As Boolean, iTmpSheet%
    IsExist = False
    For iTmpSheet = 1 To Application.ActiveWorkbook.Sheets.Count
        If Application.ActiveWorkbook.Sheets(iTmpSheet).Name = sWSName Then
            IsExist = True
            Exit For
        End If
    Next
    CheckSheet = IsExist
End Function
Public Function IsInArray(FoundString As String, arr As Variant) As Boolean
    Dim i%
    For i = LBound(arr) To UBound(arr)
        If arr(i) = FoundString Then
            IsInArray = True
            Exit Function
        End If
    Next i
    IsInArray = False
End Function
'=============================Ribbon 2 - 2'=============================
Sub RenderColor()
    Call InitGlobals
    Dim srs As Series, chartset As ChartObject
    For Each chartset In ObjWS_Config.ChartObjects
            For Each srs In chartset.Chart.SeriesCollection
                For Each TmpCell In ObjCell_Result
                    Dim Flag%: Flag = 0
                    If (InStr(srs.Name, TmpCell.Value) Or srs.Name = TmpCell.Value) And TmpCell.Value <> "" And (Flag = 0 Or srs.Name = TmpCell.Value) Then
                        Flag = 1
                        'srs.Border.Color = TmpCell.Interior.Color
                        If TmpCell.Interior.Pattern = xlNone Then
                            srs.MarkerForegroundColor = -1
                        Else
                            srs.MarkerForegroundColor = TmpCell.Interior.Color
                        End If
                    End If
                Next TmpCell
            Next srs
    Next chartset
End Sub
'=============================Ribbon 2 - 3'=============================
Sub ColorIndex()
    Call InitGlobals
    Dim rCnt%, cCnt%
    rCnt = SET_INTROW: cCnt = SET_NCOL
    If ObjCell_SearchPath.Offset(1).Interior.Pattern = xlNone Then
        Do While rCnt < 16
            ObjCell_SearchPath.Offset(rCnt).Interior.ColorIndex = rCnt + 32
            'Cells(rCnt, cCnt) = rCnt
            rCnt = rCnt + 1
        Loop
    Else
        ObjCell_Result.ClearFormats
        ObjCell_Result.Font.Name = "Calibri"
    End If
End Sub
'=============================Ribbon 3 - 1'=============================
Sub SaveExcel()
    Call InitGlobals
	If WB0.Worksheets.Count < 2 Then End
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    Dim WBNew As Workbook
    Dim sDir As String, sTmpPath As String, sWBNewFile$, sWBName$
    sTmpPath = Left((Trim(ObjCell_SearchPath)), InStrRev(Trim(ObjCell_SearchPath), "\"))
    sWBName = InputBox("ReName the Workbook as", "Save As:", "Result " & Format(Now(), "dd-mm-yy hh mm"))
    If StrPtr(sWBName) = 0 Then End
    sWBNewFile = sTmpPath & CStr(sWBName) & ".xlsm"
    If Dir(sTmpPath & CStr(sWBName) & ".xlsx") = "" Then
        WB0.SaveCopyAs Filename:=sWBNewFile
        Set WBNew = Workbooks.Open(Filename:=sWBNewFile)
    Dim Shp As Shape
        For Each Shp In WBNew.Worksheets(ObjWS_Config_Name).Shapes
            If Shp.Type = msoShapeRectangle Then Shp.Delete
        Next
        WBNew.Worksheets(ObjWS_Config_Name).Columns(1).Resize(, SET_PATHCOL).Delete Shift:=xlToLeft
        '===================Delete config page wording
        ActiveWindow.Zoom = 85
        WBNew.SaveAs Left(sWBNewFile, Len(sWBNewFile) - 1) & "x", 51
        WBNew.Close False
        Kill sWBNewFile
    Else
        MsgBox ("File already exists.")
    End If
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub
'=============================Ribbon 3 - 2'=============================
Sub LoadPPT()
    Call InitGlobals
	If WB0.Worksheets(ObjWS_Config_Name).ChartObjects.Count < 1 Then End
    Dim iCnt%, iSld%, Shp As Object, chtObj As Object, ObjPPT As Object, ObjPPTSld As Object
    Set ObjPPT = CreateObject("PowerPoint.Application").Presentations.Add
    iSld = 1
  For Each chtObj In WB0.Worksheets(ObjWS_Config_Name).ChartObjects
      If iCnt = 0 Then Set ObjPPTSld = ObjPPT.Slides.Add(iSld, 12)
      iCnt = iCnt + 1
      chtObj.CopyPicture
      Set Shp = ObjPPTSld.Shapes.Paste
      Shp.Width = 320
      Shp.Height = 180
      Shp.Left = 10 + ((iCnt - 1) Mod SET_CHTC) * Shp.Width
      If SET_CHTC = 3 Then Shp.Left = 120 + ((iCnt - 1) Mod SET_CHTC) * Shp.Width
      Shp.Top = 0 + Int((iCnt - 1) / SET_CHTC) * Shp.Height
      If iCnt = 9 Then iCnt = 0: iSld = iSld + 1
  Next chtObj
End Sub
'=============================Ribbon 3 - 3'=============================
Sub MailTo()
	Call InitGlobals
	If WB0.Worksheets(ObjWS_Config_Name).ChartObjects.Count < 1 Then End
	Const PR_ATTACH_MIME_TAG = "http://schemas.microsoft.com/mapi/proptag/0x370E001E"
	Const PR_ATTACH_CONTENT_ID = "http://schemas.microsoft.com/mapi/proptag/0x3712001E"
	Dim olApp As Object, olMail As Object
	Dim msg$, msgGreeting$, msgBody$, msgEnding$
	Dim cht As ChartObject, fname$, ident$, iCnt%
	Dim tempFiles As Collection
	Dim imgIdents As Collection
	Dim imgFile As Variant
	Dim attchmt As Object, oPa As Object
	Dim Owner$, FileName$: Owner = "HYLIUAA"
	'===================Create the email body with HTML-formatted content
	msgGreeting = "<font face=Calibri>" & "Dear " & Owner & ",<br><br>"
	msgBody = "Opened the sheets that contain your required Excel data. Create a new mail with the charts as the below and store them in PPT/Excel.<br>" & _
        "<font color=#ff0000><u>[Series can be classified by color]</u><br>" & _
        "<br><br><font color=#4f81bd><strong>ChartAutoGen:</strong><font color=#000000><br><br>" & _
        "Each of the images is referenced as a filename, but each one must be individually added as an attachment, then the attachment properties set to show the attachment as inline.<br><br>"
	msgEnding = "<br><br>Best Regards.<br>"
	msg = msgGreeting & msgBody
	'===================Loops and adds all charts found on the worksheet
	If WB0.Worksheets(ObjWS_Config_Name).ChartObjects.Count > 0 Then
		Set tempFiles = New Collection
		Set imgIdents = New Collection
		For Each cht In WB0.Worksheets(ObjWS_Config_Name).ChartObjects
			fname = ""
			If iCnt Mod 3 = 2 Then
				msg = msg & ChartToEmbeddedHTML(cht, fname, ident) & "<br>"
			Else
				msg = msg & ChartToEmbeddedHTML(cht, fname, ident) 
			End If
			tempFiles.Add fname
			imgIdents.Add ident
			iCnt = iCnt + 1
		Next cht
	End If
	msg = msg & msgEnding
	'FileName = Application.GetOpenFilename(FileFilter:= "All Files (*.*), *.*")
	'===================Create the mail item
	Set olApp = CreateObject("Outlook.Application")
	Set olMail = olApp.CreateItem(0)'olMailItem
	With olMail
		.To = Owner & "@tsmc.com"
		If FileName <> "False" And FileName <> "" Then .Attachments.Add FileName
		.CC = ""
		.Subject = "[ChartAutoGen]" & " " & Owner & "- " & "ChartGen need your confirm"
		.BodyFormat = 2        'olFormatHTML=2
		'each of the images is referenced as a filename, but each one must be individually added as an attachment, then the attachment properties set to show the attachment as "inline". 
        'Because the image will be inlined, we'll use the "ident" as the reference (internal to the message body HTML)
		If (Not tempFiles Is Nothing) Then
			For iCnt = 1 To tempFiles.Count
				Set attchmt = .attachments.Add(tempFiles.Item(iCnt))
				Set oPa = attchmt.PropertyAccessor
				oPa.SetProperty PR_ATTACH_MIME_TAG, "image/png"
				oPa.SetProperty PR_ATTACH_CONTENT_ID, imgIdents.Item(iCnt)
			Next iCnt
		End If
		'.Save
		.HTMLBody = msg
		.Display '.Send
	End With
	'===================Delete the temp files now
	For Each imgFile In tempFiles
		Kill imgFile
	Next imgFile
	'===================Clean up and get out
	Set tempFiles = Nothing
	Set imgIdents = Nothing
	Set attchmt = Nothing
	Set oPa = Nothing
	Set olMail = Nothing
	Set olApp = Nothing
	'ActiveWorkbook.Close False
End Sub
Private Function ChartToEmbeddedHTML(thisChart As ChartObject, ByRef tmpFile As String, ByRef ident As String) As String
	Dim html As String
	ident = RandomString(8)
	tmpFile = thisChart.Parent.Parent.Path & "\" & ident & ".png"
	thisChart.Activate
	thisChart.Chart.Export Filename:=tmpFile, Filtername:="png"
	html = "<img alt='Excel Chart' src='cid:" & ident & "'></img>"
	ChartToEmbeddedHTML = html
End Function
Private Function RandomString(strlen As Integer) As String
	Dim i As Integer, iTemp As Integer, bOK As Boolean, strTemp As String
	'48-57 = 0 To 9, 65-90 = A To Z, 97-122 = a To z
	'amend For other characters If required
	For i = 1 To strlen
		Do
			iTemp = Int((122 - 48 + 1) * Rnd + 48)
			Select Case iTemp
			Case 48 To 57, 65 To 90, 97 To 122: bOK = True
			Case Else: bOK = False
			End Select
		Loop Until bOK = True
		bOK = False
		strTemp = strTemp & Chr(iTemp)
	Next i
	RandomString = strTemp
End Function
'=============================Ribbon 5 - 1'=============================
Sub Reset()
    Call InitGlobals
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    If ObjWS_Config.ChartObjects.Count > 0 Then ObjWS_Config.ChartObjects.Delete
    For Each TmpSheet In WB0.Worksheets
        If TmpSheet.Name <> ObjWS_Config.Name Then TmpSheet.Delete
    Next
    With ObjCell_Result.Offset(, SET_INTCOL - SET_PATHCOL).Resize(, SET_PATHCOL - SET_INTCOL + 1)
        .ClearFormats
        .Font.Name = "Calibri"
        .Font.Size = 11
        .Font.Bold = False
        .Font.Italic = False
        .HorizontalAlignment = xlCenter
    End With
    ObjCell_Result.HorizontalAlignment = xlLeft
    ObjCell_Result.ClearContents
    'ObjCell_Result.Font.ColorIndex = 48
    ObjWS_Config.Cells(SET_CALCROW, SET_CALCCOL).Resize(MAXNUM_CALRESULT + SET_OFFSET).Clear
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub
'=============================Ribbon 5 - 2'=============================
Sub Calculate()
    Call InitGlobals
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    Dim ParameterInput() as Variant, iCnt%
    ReDim ParameterInput(5)
    ParameterInput = Array("Finger", "Width (um)", "Length (um)", "Pitch (um)", "Vgg")
    For iCnt = 0 to UBound(ParameterInput)
        With ObjWS_Config.Cells(SET_CALCROW + iCnt * 2, SET_CALCCOL)
            .Value = ParameterInput(iCnt)
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .Font.ColorIndex = 2
            .Font.Bold = False
            .Font.Italic = True
            .Interior.ColorIndex = 15
        End With
    Next iCnt
	If Trim(ObjWS_Config.Cells(SET_CALCROW + 1, SET_CALCCOL)) = "" Then End
    Dim CalcSheet As Worksheet, sWSName$, VdCol%, IdCol%, VgCol%, LastCol%, TitleRow%, Vdd#, Vgg#, Crit#, Width#, Length#, Pitch#, Finger#, NPType%
    Finger = CheckNumber(ObjWS_Config.Cells(SET_CALCROW + 1, SET_CALCCOL))
    Width = CheckNumber(ObjWS_Config.Cells(SET_CALCROW + 3, SET_CALCCOL))
    Length = CheckNumber(ObjWS_Config.Cells(SET_CALCROW + 5, SET_CALCCOL))
    Pitch = CheckNumber(ObjWS_Config.Cells(SET_CALCROW + 7, SET_CALCCOL))
    Vgg = CheckNumber(ObjWS_Config.Cells(SET_CALCROW + 9, SET_CALCCOL))
    If Finger = 0 Then Finger = 2
    If Width = 0 Then Width = 20
    If Length = 0 Then Length = 0.5
    If Pitch = 0 Then Pitch = 1
    If Vgg = 0 Then Vgg = 3.3
    sWSName = InputBox("SheetName: ", "Sheet to be calculated (IdVg Curve)")
    If StrPtr(sWSName) = 0 Then End
    If Not CheckSheet(sWSName) Then: MsgBox("Sheet no found"): End
    Set CalcSheet = WB0.Worksheets(sWSName)
    '===================Initial sheet information   
    Set TmpCell = DataRange(CalcSheet, "Vd")
    VdCol = TmpCell.Column
    VgCol = DataRange(CalcSheet, "Vg").Column
    IdCol = DataRange(CalcSheet, "Id").Column
    TitleRow = TmpCell.Row - 1
    If TitleRow = 0 Then TitleRow = 1
    LastCol = 2
    Do While CalcSheet.Cells(TitleRow, LastCol) <> ""
        If LastCol > 20 Then MsgBox ("Too many columns"): End
        LastCol = LastCol + 1
    Loop
    Vdd = CalcSheet.Cells(TitleRow + 1, VdCol)
    NPType = 1
    If Vdd < 0 Then NPType = -1
    Crit = 0.0000001 * Width * Finger / Length * NPType
    '===================$Calculate the Vtlin/Vtsat
    Dim i%, IdL#, IdH#, VgL#, VgH#, Vtlin#, Vtgm#, Gmmax#, Idlin#, Idlin0#
    i = TitleRow + 2
    Do While CalcSheet.Cells(i, IdCol) <> ""
        IdL = CalcSheet.Cells(i - 1, IdCol).Value: IdH = CalcSheet.Cells(i, IdCol).Value
        VgL = CalcSheet.Cells(i - 1, VgCol).Value: VgH = CalcSheet.Cells(i, VgCol).Value
        If (Abs(IdL) < Abs(Crit)) And (Abs(IdH) > Abs(Crit)) Then Vtlin = (Crit - IdL) / (IdH - IdL) * (VgH - VgL) + VgL: Exit Do
        i = i + 1
        If i > 2000 Then MsgBox ("Data too many"): End
    Loop
    If CalcSheet.Cells(i, IdCol) = "" Then Vtlin = 999
    '===================$Calculate the Vtgm
    Dim Flag%
    i = TitleRow + 2: Gmmax = -10000: Flag = 0
    If Trim(CalcSheet.Cells(TitleRow, LastCol - 1)) <> "Gm" Then CalcSheet.Cells(TitleRow, LastCol) = "Gm": CalcSheet.Cells(TitleRow + 1, LastCol) = 0: Flag = 1
    '===================Add Gm Col to the data sheet
    Do While CalcSheet.Cells(i, IdCol) <> ""
        VgL = CalcSheet.Cells(i - 1, VgCol).Value: VgH = CalcSheet.Cells(i, VgCol).Value
        IdL = CalcSheet.Cells(i - 1, IdCol).Value: IdH = CalcSheet.Cells(i, IdCol).Value
        If Flag = 1 Then CalcSheet.Cells(i, LastCol) = (IdH - IdL) / (VgH - VgL)
        If Vtgm = 0 And VgL * NPType >= 0 Then
            If Gmmax < ((IdH - IdL) / (VgH - VgL)) Then
                Gmmax = (IdH - IdL) / (VgH - VgL)
            Else
                Vtgm = VgL - IdL / Gmmax - 0.5 * Vdd
            End If
        End If
        i = i + 1
        If i > 2000 Then MsgBox ("Data too many"): End
    Loop
    '===================$Calculate the Idlin(A)
    i = TitleRow + 2
    Do While CalcSheet.Cells(i, VgCol).Value <> ""
        IdL = CalcSheet.Cells(i - 1, IdCol).Value: IdH = CalcSheet.Cells(i, IdCol).Value
        VgL = CalcSheet.Cells(i - 1, VgCol).Value: VgH = CalcSheet.Cells(i, VgCol).Value
        If (Abs(VgL) <= Abs(Vgg)) And (Abs(VgH) >= Abs(Vgg)) Then Idlin = (Vgg - VgL) / (VgH - VgL) * (IdH - IdL) + IdL: Exit Do
        i = i + 1
    Loop
    If CalcSheet.Cells(i, IdCol) = "" Then Idlin = 999
    '===================Output offset
    ObjWS_Config.Cells(SET_CALCROW + SET_OFFSET, SET_INTCOL).Resize(MAXNUM_CALRESULT).HorizontalAlignment = xlLeft
	ObjWS_Config.Cells(SET_CALCROW + SET_OFFSET, SET_CALCCOL)  = "Area [" & Width*Pitch/1000000 & " (mm2)]"
    If Abs(Vdd) = 0.1 Then
        ObjWS_Config.Cells(SET_CALCROW + SET_OFFSET + 1, SET_CALCCOL) = "Vtgm [" & Round(Vtgm, 3) & " (V)] Vd=0.1V, extracted from Vg@Gmmax"
        ObjWS_Config.Cells(SET_CALCROW + SET_OFFSET + 2, SET_CALCCOL) = "Vtlin [" & Round(Vtlin, 3) & " (V)] Vd=0.1V, search Vg when Id=1.0e-7*(W/L)"
		Idlin0 = Idlin * 1000000 / Width / Finger
        ObjWS_Config.Cells(SET_CALCROW + SET_OFFSET + 4, SET_CALCCOL) = "Idlin [" & Round(Idlin0, 3) & " (uA/um)] Vd=0.1V, sensing Id@Vg=Vgg"
    Else
        ObjWS_Config.Cells(SET_CALCROW + SET_OFFSET + 3, SET_CALCCOL) = "Vtsat [" & Round(Vtlin, 3) & " (V)] Vd=Vdd, search Vg when Id=1.0e-7*(W/L)"
        ObjWS_Config.Cells(SET_CALCROW + SET_OFFSET + 5, SET_CALCCOL) = "Idsat [" & Round(Idlin * 1000000 / Width / Finger, 3) & " (uA/um)] Vd=Vdd, sensing Id@Vg=Vgg"
    End If
    ObjWS_Config.Cells(SET_CALCROW + SET_OFFSET + 6, SET_CALCCOL) = "Ida  [" & "NA" & " (uA/um)] Vd=Vdd/2V sensing Id @Vg=Vtgm + 0.2"
    ObjWS_Config.Cells(SET_CALCROW + SET_OFFSET + 7, SET_CALCCOL) = "Ioff  [" & "NA" & " (pA)] Vg=0V, sensing Id@Vd=1.1*Vdd"
    If Idlin0 <> 0 Then ObjWS_Config.Cells(SET_CALCROW + SET_OFFSET + 8, SET_CALCCOL) = "Rsp [" & Round(100*Pitch/Idlin0, 3) & " (mΩ*mm2)] "
    ObjWS_Config.Cells(SET_CALCROW + SET_OFFSET + 10, SET_CALCCOL) = "Gm  (Id2-Id1)/(Vg2-Vg1), (Id1@Vg1=Vtgm+Vgshift-dVg; Id2@Vg2=Vtgm+Vgshift+dVg), Vd=Vdd/2, Vgshift=0.2, dVg=0.025 "
    ObjWS_Config.Cells(SET_CALCROW + SET_OFFSET + 11, SET_CALCCOL) = "Gds (Id2-Id1)/(Vd2-Vd1), (Id1@Vd1=Vdd/2-dVd; Id2@Vd2=Vdd/2+dVd), Vg=Vtgm+Vgshift, Vgshift=0.2, dVd=0.05 "
    ObjWS_Config.Select
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub
Public Function CheckNumber(CheckCell As Range) As Double
    If CheckCell.Value = "" Then CheckNumber = 0
    If IsNumeric(CheckCell) = 1 Then 
        CheckNumber = CheckCell.Value
    Else
        CheckNumber = 0
    End If
End Function
'=============================Global'====================================
Sub InitGlobals()
    Set WB0 = ActiveWorkbook
    Set ObjWS_Config = ActiveWorkbook.Worksheets(ObjWS_Config_Name)
    Set ObjCell_SearchPath = ObjWS_Config.Cells(SET_INTROW, SET_PATHCOL)
    Set ObjCell_Result = ObjCell_SearchPath.Offset(1).Resize(MAXNUM_FILEFIND)
    Set ObjCell_Name = ObjCell_Result.Offset(, SET_NCOL - SET_PATHCOL)
End Sub
'=============================Initiall'==================================
Sub SetPage()
	ReDim GlobalMacroList(SET_BTTCNT - 1)
    GlobalMacroList = Array("ListFile", "SimpName", "ExtractSheet", "ChartGen", "RenderColor", "ColorIndex", "SaveExcel", "LoadPPT", "MailTo", "Reset", "Calculate")
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
	ActiveWindow.Zoom = 85
    ActiveWorkbook.Worksheets(1).Name = ObjWS_Config_Name
    Call InitGlobals
	Call Reset
    ActiveWorkbook.Worksheets(1).Cells.ClearContents
    ActiveWorkbook.Worksheets(1).Cells.ClearFormats
    ActiveWorkbook.Worksheets(1).Cells.Font.Name = "Calibri"
    ActiveWorkbook.Worksheets(1).Cells.Font.Size = 11
    For Each TmpCell In WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_INTCOL).Resize(, SET_PATHCOL - SET_INTCOL + 1)
        With TmpCell
            .Font.Name = "Calibri"
            .Font.Size = 11
            .Font.Bold = True
            .Font.ColorIndex = 1
            .Interior.ThemeColor = xlThemeColorDark1
            .Interior.TintAndShade = -0.05
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .ColumnWidth = 8.38
            .Borders(xlEdgeLeft).LineStyle = xlContinuous
            .Borders(xlEdgeTop).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            '.Borders(xlEdgeRight).LineStyle = xlContinuous
        End With
    Next TmpCell
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_INTCOL).Value = "Filter"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_YCOL).Value = "Sense"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_XCOL).Value = "Force"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_NCOL).Value = "Sheet Name"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_PATHCOL).Value = "<Path>"
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_NCOL).ColumnWidth = 25.14
    '===================Excel list define
    With WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_PATHCOL)
        .Interior.ColorIndex = 15
        .HorizontalAlignment = xlLeft
    End With
    Dim Shp As Shape, iColor%, iCnt%
            For Each Shp In WB0.Worksheets(ObjWS_Config_Name).Shapes
            If Shp.Type = msoShapeRectangle Then Shp.Delete
        Next
    For Each TmpCell In WB0.Worksheets(ObjWS_Config_Name).Cells(SET_BTTROW, SET_BTTCOL).Resize(SET_BTTCNT)
        TmpCell.ColumnWidth = 12
        Set Shp = WB0.Worksheets(ObjWS_Config_Name).Shapes.AddShape(msoShapeRectangle, TmpCell.Left, TmpCell.Top, TmpCell.Width, TmpCell.Height)
        With Shp
            .TextFrame2.TextRange.Text = "Click" & iColor
            .TextFrame2.TextRange.Font.Name = "Calibri"
            .TextFrame2.TextRange.Font.Size = 11
            .TextFrame2.TextRange.Font.Italic = True
            .TextFrame2.TextRange.Font.Bold = False
            .TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 255, 255)
            If iColor > 8 Then .TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(0, 0, 0)
            .TextFrame.HorizontalAlignment = xlHAlignCenter
            .TextFrame.VerticalAlignment = xlVAlignCenter
            If iColor Mod 6 < 3 Then .Fill.ForeColor.RGB = RGB(0, 191 - 10 * (iColor Mod 3), 255 - 10 * (iColor Mod 3)) 'Blue
            If iColor Mod 6 > 2 Then .Fill.ForeColor.RGB = RGB(255, 110 - 15 * (iColor Mod 3), 110 - 15 * (iColor Mod 3)) ' Red
            If iColor > 8 Then .Fill.ForeColor.RGB = RGB(230, 230, 230) 'Grey
			'.Fill.ForeColor.RGB = RGB(210 - 10 * (iColor Mod 3), 210 - 10 * (iColor Mod 3), 255) 'Purple
        End With
        iColor = iColor + 1
    Next TmpCell
    '===================Shapes color modification
    For iCnt = 0 to UBound(GlobalMacroList)
		With WB0.Worksheets(ObjWS_Config_Name).Shapes(iCnt + 1)
			.TextFrame2.TextRange.Text = GlobalMacroList(iCnt)
			.OnAction = GlobalMacroList(iCnt)
			If .TextFrame2.TextRange.Text = "Reset" Then .TextFrame2.TextRange.Font.Fill.ForeColor.RGB = RGB(255, 50, 50)
		End With
    Next iCnt
End Sub
