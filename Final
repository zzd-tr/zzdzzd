Option Explicit
Public WB0 As Workbook, TmpCell As Range, TmpSheet As Worksheet, ObjWS_Config As Object, ObjCell_SearchPath As Object, ObjCell_Result As Object, ObjCell_Name As Object, GenType As Object
Public Const ObjWS_Config_Name As String = "CONFIG_PAGE"
Public Const GENTYPE1 As String = "Cluster: all data in one"
Public Const GENTYPE2 As String = "Series: chart series"

Public Const MAXNUM_STARMARK As Integer = 5
Public Const MAXNUM_FILEFIND As Integer = 100               ' total files can be found
Public Const MAXNUM_CURVESERIE As Integer = 50      ' the columns of data sheet
Public Const MAXNUM_DATAFINDTIME As Integer = 10    ' how many times will it be searched

Public Const SET_CHTW As Integer = 400
Public Const SET_CHTH As Integer = 300
Public Const SET_CHTL As Integer = 500
Public Const SET_CHTT As Integer = 15

Public Const SET_CHTNCOL As Integer = 1
Public Const SET_INTROW As Integer = 3
Public Const SET_XCOL As Integer = SET_CHTNCOL + 1: Public Const SET_YNCOL As Integer = SET_CHTNCOL + 4
Public Const SET_YCOL As Integer = SET_CHTNCOL + 2: Public Const SET_FCOL As Integer = SET_CHTNCOL + 5
Public Const SET_XNCOL As Integer = SET_CHTNCOL + 3: Public Const SET_PATHCOL As Integer = SET_CHTNCOL + 6
Public Function ChartProperty(myChart As Chart, ChartName$, XName$, YName$)
    With myChart
    '== Title:
    .HasTitle = True
    .ChartTitle.Text = ChartName
    .ChartType = xlXYScatter
    '== Border:
    .PlotArea.Border.LineStyle = xlSolid
    .PlotArea.Border.Weight = 3
    .PlotArea.Border.ColorIndex = 1
    '== Legend:
    .HasLegend = True
    .Legend.IncludeInLayout = False
    .Legend.Position = xlLegendPositionBottom
    If .SeriesCollection.Count > 5 Then
    .Legend.Font.Size = 7
    Else
    .Legend.Font.Size = 10
    End If
    .Legend.Width = SET_CHTW - 2: .Legend.Height = 0.15 * SET_CHTH
    .Legend.Left = 2: .Legend.Top = SET_CHTH - myChart.Legend.Height
    '== Plot:
    .PlotArea.Height = 0.7 * SET_CHTH
    '== Axes
    With .Axes(xlCategory)
    .HasTitle = True
    .AxisTitle.Text = XName
    .Crosses = xlMinimum
    .MajorTickMark = xlInside
    .HasMajorGridlines = True
    .MajorGridlines.Border.LineStyle = xlDash
    .MajorGridlines.Border.ColorIndex = 15
    .Format.Line.Visible = msoFalse
    End With
    With .Axes(xlValue)
    .HasTitle = True
    .AxisTitle.Text = YName
    .Crosses = xlMinimum
    .MajorTickMark = xlInside
    .HasMajorGridlines = True
    .MajorGridlines.Border.LineStyle = xlDash
    .MajorGridlines.Border.ColorIndex = 15
    .Format.Line.Visible = msoFalse
    End With
    End With
End Function
Public Function DataRange(ByVal Datasheet As Object, sPara$) As Range
    Dim iCounter%
    If Datasheet.FilterMode Then Datasheet.ShowAllData
    Set TmpCell = Datasheet.Cells.Find(What:=sPara, SearchOrder:=xlByRows, LookAt:=xlPart, MatchCase:=True)
    Do While iCounter < MAXNUM_DATAFINDTIME
    If TmpCell Is Nothing Then MsgBox ("Cannot find " & sPara & " for " & Datasheet.Name): Exit Do
    If Trim(TmpCell.Value) = sPara And IsNumeric(TmpCell.Offset(1).Text) And IsNumeric(TmpCell.Offset(2).Text) And IsNumeric(TmpCell.Offset(3).Text) Then
    Set DataRange = TmpCell.Offset(1).Resize(TmpCell.End(xlDown).Row - TmpCell.Row)
    Exit Function
    Else
    Set TmpCell = Datasheet.Cells.FindNext(TmpCell)
    iCounter = iCounter + 1
    End If
    Loop
Set DataRange = Nothing
End Function
Public Function DataArray(ByVal DataRng As Range) As Variant
    Dim iCount%, TmpArray() As Variant
    ReDim TmpArray(0)
    If DataRng Is Nothing Then: DataArray = TmpArray: Exit Function
    'FirstRow = DataRng.Row: LastRow = DataRng.End(xlDown).Row
    ReDim TmpArray(0 To DataRng.Count)
    For iCount = 0 To DataRng.Count
    TmpArray(iCount) = DataRng(iCount + 1).Value
    Next iCount
DataArray = TmpArray
End Function
Public Function Data2Chart(myChart As Chart, ByVal Datasheet As Object, sFilter$, sParaX$, sParaY$)
    Dim iRow%, iInterval%, iCount%
    If sFilter <> "" Then
    iInterval = 0: iRow = 0: iCount = 0
    For Each TmpCell In DataRange(Datasheet, sFilter)
    If iCount > MAXNUM_CURVESERIE Then MsgBox (" Too many curves for " & Datasheet.Name): Exit Function
    iRow = iRow + 1
    If TmpCell.Value <> TmpCell.Offset(1).Value Then
    If iInterval = 0 Then iInterval = iRow
    With myChart.SeriesCollection.NewSeries
    .XValues = DataArray(DataRange(Datasheet, sParaX).Offset(iCount * iInterval).Resize(iInterval))
    .Values = DataArray(DataRange(Datasheet, sParaY).Offset(iCount * iInterval).Resize(iInterval))
    .Name = Datasheet.Name & " " & sFilter & " = " & TmpCell.Value
    End With
    If TmpCell.Offset(1).Value = "" Then: Exit For
    iCount = iCount + 1
    End If
    Next TmpCell
    Else
    With myChart.SeriesCollection.NewSeries
    .XValues = DataArray(DataRange(Datasheet, sParaX))
    .Values = DataArray(DataRange(Datasheet, sParaY))
    .Name = Datasheet.Name
    End With
    End If
End Function
Public Function FilePath(sPath() As String, sTmpPath$, iCurrent%, iStarNum%, ObjCell_SearchPath)
    Dim sDir$, sFiles(MAXNUM_FILEFIND) As String, iFilesIndex%
    iFilesIndex = 0
    sDir = Left(sTmpPath, InStrRev(sTmpPath, "\"))
    If iCurrent <= iStarNum Then
    sFiles(0) = FileSystem.Dir(sTmpPath, vbDirectory)
    Do While sFiles(iFilesIndex) <> ""
    Do While sFiles(iFilesIndex) = "." Or sFiles(iFilesIndex) = ".."
    sFiles(iFilesIndex) = FileSystem.Dir()
    Loop
    iFilesIndex = iFilesIndex + 1
    sFiles(iFilesIndex) = FileSystem.Dir()
    Loop
    iFilesIndex = iFilesIndex - 1
    Dim iDocIndex%
    For iDocIndex% = 0 To iFilesIndex
    If (GetAttr(sDir & sFiles(iDocIndex)) And vbDirectory) = vbDirectory Then
    Call FilePath(sPath, sDir & sFiles(iDocIndex) & "" & sPath(iCurrent + 1), iCurrent + 1, iStarNum, ObjCell_SearchPath)
    Else
    If iCurrent = iStarNum Then
    Dim iRow%
    iRow% = 1
    Do While ObjCell_SearchPath.Offset(iRow).Value <> ""
    iRow = iRow + 1
    Loop
    ObjCell_SearchPath.Offset(iRow).Value = sDir & sFiles(iDocIndex)
    End If
    End If
    Next iDocIndex
    End If
End Function
Public Function GetWorkSheet(sFilePath As String, sRename As String)
    Dim sFileName$, ObjWS_Index As Object
    sFileName = Mid(sFilePath, InStrRev(sFilePath, "\") + 1)
    If sRename = "" Then Exit Function
    Workbooks.OpenText Filename:=sFilePath, StartRow:=1, DataType:=xlDelimited, TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=True, Tab:=True, Semicolon:=False, Comma:=True, Space:=False, Other:=False
    Dim iSheetIndex%
    For iSheetIndex = 1 To Workbooks(sFileName).Worksheets.Count
    Set ObjWS_Index = Workbooks(sFileName).Worksheets(iSheetIndex)
    If Workbooks(sFileName).Worksheets.Count > 1 Then
        ObjWS_Index.Name = sRename & Space(1) & "S" & CStr(iSheetIndex)
        If iSheetIndex = 1 Then ObjWS_Index.Name = sRename
    Else
        ObjWS_Index.Name = sRename
    End If
    ObjWS_Index.Copy after:=WB0.Worksheets(WB0.Worksheets.Count)
    Next iSheetIndex
    Workbooks(sFileName).Close savechanges:=False
End Function
Public Function CheckSheet(sWSName As String) As Boolean
    Dim IsExist As Boolean, iTmpSheet%
    IsExist = False
    For iTmpSheet = 1 To Application.ActiveWorkbook.Sheets.Count
    If Application.ActiveWorkbook.Sheets(iTmpSheet).Name = sWSName Then
    IsExist = True
    Exit For
    End If
    Next
    CheckSheet = IsExist
End Function
'====================================SUBJECT'====================================
Sub InitGlobals()
    Set WB0 = ActiveWorkbook
    Set ObjWS_Config = ActiveWorkbook.Worksheets(ObjWS_Config_Name)
    Set ObjCell_SearchPath = ObjWS_Config.Cells(SET_INTROW, SET_PATHCOL) ' Fixed result outputs under the searching path
    Set ObjCell_Result = ObjCell_SearchPath.Offset(1).Resize(MAXNUM_FILEFIND)
    Set ObjCell_Name = ObjCell_Result.Offset(, SET_CHTNCOL - SET_PATHCOL)
    Set GenType = ObjWS_Config.Cells(SET_INTROW, SET_CHTNCOL)
End Sub
Sub ListFile()
    Call InitGlobals
    Dim iStarNum%, sSearchPath$, sSplitPath(MAXNUM_STARMARK) As String
    sSearchPath = ObjCell_SearchPath.Value
    ' DEBUG: Found no path
    ObjCell_Name.ClearContents
    ObjCell_Result.ClearContents ' Initial
    If Trim(sSearchPath) = "" Then Exit Sub
    ' DEBUG: max 100 searching results. need an update for append or not
    Dim iStarPos%, iBackSlashPos% ' STAR* searching loop
    For iStarNum = 0 To MAXNUM_STARMARK
    iStarPos = InStr(sSearchPath, "*")
    If iStarPos > 0 Then
    iBackSlashPos = InStr(iStarPos, sSearchPath, "\")
    If iBackSlashPos > 0 Then
    sSplitPath(iStarNum) = Left(sSearchPath, iBackSlashPos - 1)
    sSearchPath = Mid(sSearchPath, iBackSlashPos + 1)
    Else
    sSplitPath(iStarNum) = sSearchPath
    Exit For
    End If
    Else
    sSplitPath(iStarNum) = sSearchPath
    End If
    Next iStarNum
    Call FilePath(sSplitPath, sSplitPath(0), 0, iStarNum, ObjCell_SearchPath)
    ObjCell_Result.Font.ColorIndex = xlAutomatic
End Sub
Sub OpenFile()
    Call InitGlobals
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    For Each TmpSheet In WB0.Worksheets
        If TmpSheet.Name <> ObjWS_Config.Name Then TmpSheet.Delete
    Next
    For Each TmpCell In ObjCell_Name
        If Trim(TmpCell) <> "" And Trim(TmpCell.Offset(, SET_PATHCOL - SET_CHTNCOL)) <> "" Then Call GetWorkSheet(Trim(TmpCell.Offset(, SET_PATHCOL - SET_CHTNCOL)), Trim(TmpCell))
    Next TmpCell
    If CStr(Trim(GenType)) = GENTYPE2 Then
        Dim Flag%
        'ObjCell_Name.ClearContents
        For Each TmpSheet In WB0.Worksheets
            Flag = 0
            For Each TmpCell In ObjCell_Name
                If Trim(TmpCell) = TmpSheet.Name Then Flag = 1: Exit For
            Next TmpCell
            If Flag = 0 Then ObjWS_Config.Cells(ObjWS_Config.Cells(MAXNUM_FILEFIND, SET_CHTNCOL).End(xlUp).Row + 1, SET_CHTNCOL) = TmpSheet.Name
        Next TmpSheet
        Set TmpCell = ObjCell_Name.Find(What:=ObjWS_Config_Name, SearchOrder:=xlByRows, LookAt:=xlWhole, MatchCase:=True): TmpCell.ClearContents
    End If
    ObjWS_Config.Select
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub
Sub ChartGen()
    Call InitGlobals
    Dim ChartName$, sNameX$, sNameY$, sNameY2$, sParaX$, sParaY$, sParaY2$, sFilter$, myChart As Chart
    Dim iSheetNum%, TmpCell As Range
    If ObjWS_Config.ChartObjects.Count > 0 Then ObjWS_Config.ChartObjects.Delete ' Clear the chart
    Select Case CStr(GenType)
    Case GENTYPE1
    Set myChart = ObjWS_Config.ChartObjects.Add(Left:=SET_CHTL, Top:=SET_CHTT, Width:=SET_CHTW, Height:=SET_CHTH).Chart
    For Each TmpCell In ObjCell_Name
    If TmpCell.Value <> "" Then
    sParaX = Trim(TmpCell.Offset(, SET_XCOL - SET_CHTNCOL)): sNameX = Trim(TmpCell.Offset(, SET_XNCOL - SET_CHTNCOL))
    sParaY = Trim(TmpCell.Offset(, SET_YCOL - SET_CHTNCOL)): sNameY = Trim(TmpCell.Offset(, SET_YNCOL - SET_CHTNCOL))
    sFilter = Trim(TmpCell.Offset(, SET_FCOL - SET_CHTNCOL)): ChartName = Trim(TmpCell)
    Exit For
    End If
    Next
    For Each TmpSheet In WB0.Worksheets
    If TmpSheet.Name <> ObjWS_Config.Name Then Call Data2Chart(myChart, TmpSheet, sFilter, sParaX, sParaY)
    Next
    Call ChartProperty(myChart, ChartName, sNameX, sNameY)
    Case GENTYPE2
    Dim iLeft%, iTop%: iLeft = SET_CHTL: iTop = SET_CHTT
    For Each TmpCell In ObjCell_Name
    If TmpCell Is Nothing Then MsgBox ("No Data Found"): End
    If TmpCell.Value = ObjWS_Config_Name Then MsgBox ("Please rename the name."): End
    If TmpCell.Value <> "" Then
    If CheckSheet(CStr(TmpCell.Value)) Then
    TmpCell.Interior.ColorIndex = 15
    sParaX = Trim(TmpCell.Offset(, SET_XCOL - SET_CHTNCOL)): sNameX = Trim(TmpCell.Offset(, SET_XNCOL - SET_CHTNCOL))
    sParaY = Trim(TmpCell.Offset(, SET_YCOL - SET_CHTNCOL)): sNameY = Trim(TmpCell.Offset(, SET_YNCOL - SET_CHTNCOL))
    sFilter = Trim(TmpCell.Offset(, SET_FCOL - SET_CHTNCOL)): ChartName = Trim(TmpCell)
    Set myChart = ObjWS_Config.ChartObjects.Add(Left:=iLeft, Top:=iTop, Width:=SET_CHTW, Height:=SET_CHTH).Chart
    Call Data2Chart(myChart, WB0.Worksheets(TmpCell.Value), sFilter, sParaX, sParaY)
    Call ChartProperty(myChart, ChartName, sNameX, sNameY)
    If (ObjWS_Config.ChartObjects.Count) Mod 3 = 0 Then
    iLeft = SET_CHTL: iTop = iTop + SET_CHTH
    Else
    iLeft = iLeft + SET_CHTW
    End If
    End If
    End If
    Next
    Case Else
    MsgBox ("Need select GenType")
    End Select
End Sub
Sub ColorIndex()
    Dim rCnt%, cCnt%
    rCnt = SET_INTROW + 1: cCnt = 1
    Do While rCnt < 57
    Cells(rCnt, cCnt).Interior.ColorIndex = rCnt
    With Cells(rCnt, cCnt).Font
    .Name = "Calibri"
    .Size = 11
    .Bold = True
    End With
    Cells(rCnt, cCnt) = rCnt
    rCnt = rCnt + 1
    Loop
End Sub
Sub StoreAsNew()
    Call InitGlobals
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    Dim WBNew As Workbook
    Dim sDir As String, sTmpPath As String, sWBNewFile$, sWBName$
    sTmpPath = Left((Trim(ObjCell_SearchPath)), InStrRev(Trim(ObjCell_SearchPath), "\"))
    sWBName = InputBox("ReName the Workbook as", "Save As:", "Result")
    sWBNewFile = sTmpPath & CStr(sWBName) & ".xlsm"
    If Dir(sTmpPath & CStr(sWBName) & ".xlsx") = "" Then
    WB0.SaveCopyAs Filename:=sWBNewFile
    Set WBNew = Workbooks.Open(sWBNewFile)
    WBNew.Sheets(ObjWS_Config_Name).Columns(1).Resize(, SET_PATHCOL).Delete Shift:=xlToLeft ' delete config page
    WBNew.SaveAs Left(sWBNewFile, Len(sWBNewFile) - 1) & "x", 51
    WBNew.Close False
    Kill sWBNewFile
    Else
    MsgBox ("File already exists.")
    End If
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub
Sub SaveAsPPT()
    Call InitGlobals
    Dim ObjPPT As Object, ObjPPTSld As Object
    Set ObjPPT = CreateObject("PowerPoint.Application").Presentations.Add
    Set ObjPPTSld = ObjPPT.Slides.Add(1, 12)
    'ObjPPTSld.Shapes.Paste
End Sub
Sub ReName()
    '=IFERROR(TRIM(LEFT(TRIM(RIGHT(SUBSTITUTE($G$5,"\",REPT(" ",LEN($G$5))),LEN($G$5))),FIND(".sbd",TRIM(RIGHT(SUBSTITUTE($G$5,"\",REPT(" ",LEN($G$5))),LEN($G$5)))) - 1)),"")
    Call InitGlobals
    Dim sAddr$, sDataType$, sStr$, sStr2$
    sDataType = Chr(34) & InputBox("Input the data type: ", "Split Index", ".xlsx") & Chr(34)
    For Each TmpCell In ObjCell_SearchPath.Offset(1, SET_CHTNCOL - SET_PATHCOL).Resize(MAXNUM_FILEFIND)
    If TmpCell.Offset(, SET_PATHCOL - SET_CHTNCOL) <> "" And Trim(TmpCell.Value) = "" Then
    sAddr = TmpCell.Offset(, SET_PATHCOL - SET_CHTNCOL).Address
    sStr2 = sAddr & Chr(44) & Chr(34) & Chr(92) & Chr(34) & Chr(44)
    sStr = "TRIM(RIGHT(SUBSTITUTE(" & sStr2 & "REPT(" & Chr(34) & Chr(32) & Chr(34) & ",LEN(" & sAddr & "))),LEN(" & sAddr & ")))"
    TmpCell = Chr(61) & "IFERROR(TRIM(LEFT(" & sStr & Chr(44) & "FIND(" & sDataType & Chr(44) & sStr & ") - 1))," & Chr(34) & Chr(34) & Chr(41)
    End If
    Next
End Sub
Sub Reset()
    Call InitGlobals
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    If ObjWS_Config.ChartObjects.Count > 0 Then ObjWS_Config.ChartObjects.Delete
    For Each TmpSheet In WB0.Worksheets
    If TmpSheet.Name <> ObjWS_Config.Name Then TmpSheet.Delete
    Next
    ObjCell_Name.ClearContents
    With ObjCell_Name
    .ClearFormats
    .Font.Name = "Calibri"
    .Font.Size = 11
    .Font.Bold = False
    End With
    ObjCell_Result.ClearContents
    ObjCell_SearchPath.Offset(1) = "e.g.: YY:\Individual\HYLIUAA\*"
    ObjCell_SearchPath.Offset(2) = "Input path and List Data, then rename needed ones manually or by ReName."
    ObjCell_SearchPath.Offset(3) = "Select GenType and load data sheets by Open File, only named charts will be generated."
    ObjCell_Name.Resize(2) = GENTYPE2
    ObjCell_Name.Resize(1) = GENTYPE1
    ObjCell_Result.Font.ColorIndex = 48
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub
Sub Setup()
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    Set WB0 = ActiveWorkbook
    WB0.Worksheets(1).Name = ObjWS_Config_Name
    With WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_CHTNCOL)
        .ClearFormats
        .Value = "<Input Type>"
        .Font.Name = "Calibri"
        .Font.Size = 11
        .Font.Bold = True
        .Font.ColorIndex = 1
        .Interior.ThemeColor = xlThemeColorDark1
		.Interior.TintAndShade = -0.05
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlCenter
        .ColumnWidth = 20
        .Copy
    End With
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_XCOL).Value = "Xaxis": WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_XCOL).PasteSpecial Paste:=xlPasteFormats
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_YCOL).Value = "Yaxis": WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_YCOL).PasteSpecial Paste:=xlPasteFormats
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_XNCOL).Value = "Xtitle": WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_XNCOL).PasteSpecial Paste:=xlPasteFormats
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_YNCOL).Value = "Xtitle": WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_YNCOL).PasteSpecial Paste:=xlPasteFormats
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_FCOL).Value = "Filter": WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_FCOL).PasteSpecial Paste:=xlPasteFormats
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_PATHCOL).Value = "<Input Path>": WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_PATHCOL).PasteSpecial Paste:=xlPasteFormats
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_CHTNCOL).Interior.ColorIndex = 15
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_PATHCOL).Interior.ColorIndex = 15
    WB0.Worksheets(ObjWS_Config_Name).Cells(SET_INTROW, SET_PATHCOL).ColumnWidth = 20
	WB0.Worksheets(ObjWS_Config_Name).Buttons.Delete
	
    Application.CutCopyMode = False
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
End Sub

'log on current only for Ioff, Gm Y2
'Y2, save as ppt          FullSeriesCollection(3).AxisGroup = 2









